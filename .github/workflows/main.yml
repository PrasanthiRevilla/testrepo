name: "ECR-ECS-EKS-Deployment"
on:
  workflow_dispatch:

jobs:
  ECR_ECS_EKS_Deployment:
    name: Build Docker Image, Push To ECR, Deploy To ECS and EKS
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout
        uses: actions/checkout@v2    

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Build and push the tagged Docker image to Amazon ECR
        id: containerImage
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: ECR Status Check
        if: steps.containerImage.outcome == 'failure'
        run: exit 1

      - name: Create EKS Cluster
        env:
          CLUSTER_NAME: "my-eks-cluster"
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws eks create-cluster \
            --name $CLUSTER_NAME \
            --role-arn ${{ secrets.EKS_ROLE_ARN }} \
            --resources-vpc-config subnetIds=${{ secrets.SUBNET_IDS }},securityGroupIds=${{ secrets.SECURITY_GROUP_IDS }} \
            --region $AWS_REGION

          aws eks wait cluster-active --name $CLUSTER_NAME --region $AWS_REGION

      - name: Create EKS Node Group
        env:
          CLUSTER_NAME: "my-eks-cluster"
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws eks create-nodegroup \
            --cluster-name $CLUSTER_NAME \
            --nodegroup-name my-node-group \
            --node-role ${{ secrets.EKS_NODE_ROLE }} \
            --subnets ${SUBNET_IDS} \
            --scaling-config minSize=1,maxSize=3,desiredSize=1 \
            --region $AWS_REGION

          aws eks wait nodegroup-active --cluster-name $CLUSTER_NAME --nodegroup-name my-node-group --region $AWS_REGION

      - name: Update kubeconfig
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: "my-eks-cluster"
        run: |
          echo "Cluster Name is: $CLUSTER_NAME"  # Verifies CLUSTER_NAME is set
          if [ -z "$CLUSTER_NAME" ]; then
            echo "CLUSTER_NAME is not set."
            exit 1
          fi
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      - name: Get Nodes
        run: |
          kubectl get nodes

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          kubectl create deployment my-app --image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --replicas=1 --requests=cpu=250m,memory=256Mi
          kubectl expose deployment my-app --type=LoadBalancer --port=80 
